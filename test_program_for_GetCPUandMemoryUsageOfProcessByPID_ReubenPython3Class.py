# -*- coding: utf-8 -*-

'''
Reuben Brewer, Ph.D.
reuben.brewer@gmail.com
www.reubotics.com

Software Revision A, 07/15/2025

Verified working on: Python 3.11/3.12 for Windows 10, 11 64-bit.
'''

__author__ = 'reuben.brewer'

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################

##########################################################################################################
from GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class import *
##########################################################################################################

##########################################################################################################
import os
import sys

import time
import traceback
import keyboard
##########################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
def ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(input, number_of_leading_numbers = 4, number_of_decimal_places = 3):

    number_of_decimal_places = max(1, number_of_decimal_places) #Make sure we're above 1

    ListOfStringsToJoin = []

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    if isinstance(input, str) == 1:
        ListOfStringsToJoin.append(input)
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    elif isinstance(input, int) == 1 or isinstance(input, float) == 1:
        element = float(input)
        prefix_string = "{:." + str(number_of_decimal_places) + "f}"
        element_as_string = prefix_string.format(element)

        ##########################################################################################################
        ##########################################################################################################
        if element >= 0:
            element_as_string = element_as_string.zfill(number_of_leading_numbers + number_of_decimal_places + 1 + 1)  # +1 for sign, +1 for decimal place
            element_as_string = "+" + element_as_string  # So that our strings always have either + or - signs to maintain the same string length
        else:
            element_as_string = element_as_string.zfill(number_of_leading_numbers + number_of_decimal_places + 1 + 1 + 1)  # +1 for sign, +1 for decimal place
        ##########################################################################################################
        ##########################################################################################################

        ListOfStringsToJoin.append(element_as_string)
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    elif isinstance(input, list) == 1:

        if len(input) > 0:
            for element in input: #RECURSION
                ListOfStringsToJoin.append(ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(element, number_of_leading_numbers, number_of_decimal_places))

        else: #Situation when we get a list() or []
            ListOfStringsToJoin.append(str(input))

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    elif isinstance(input, tuple) == 1:

        if len(input) > 0:
            for element in input: #RECURSION
                ListOfStringsToJoin.append("TUPLE" + ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(element, number_of_leading_numbers, number_of_decimal_places))

        else: #Situation when we get a list() or []
            ListOfStringsToJoin.append(str(input))

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    elif isinstance(input, dict) == 1:

        if len(input) > 0:
            for Key in input: #RECURSION
                ListOfStringsToJoin.append(str(Key) + ": " + ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(input[Key], number_of_leading_numbers, number_of_decimal_places))

        else: #Situation when we get a dict()
            ListOfStringsToJoin.append(str(input))

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    else:
        ListOfStringsToJoin.append(str(input))
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    if len(ListOfStringsToJoin) > 1:

        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        StringToReturn = ""
        for Index, StringToProcess in enumerate(ListOfStringsToJoin):

            ################################################
            if Index == 0: #The first element
                if StringToProcess.find(":") != -1 and StringToProcess[0] != "{": #meaning that we're processing a dict()
                    StringToReturn = "{"
                elif StringToProcess.find("TUPLE") != -1 and StringToProcess[0] != "(":  # meaning that we're processing a tuple
                    StringToReturn = "("
                else:
                    StringToReturn = "["

                StringToReturn = StringToReturn + StringToProcess.replace("TUPLE","") + ", "
            ################################################

            ################################################
            elif Index < len(ListOfStringsToJoin) - 1: #The middle elements
                StringToReturn = StringToReturn + StringToProcess + ", "
            ################################################

            ################################################
            else: #The last element
                StringToReturn = StringToReturn + StringToProcess

                if StringToProcess.find(":") != -1 and StringToProcess[-1] != "}":  # meaning that we're processing a dict()
                    StringToReturn = StringToReturn + "}"
                elif StringToProcess.find("TUPLE") != -1 and StringToProcess[-1] != ")":  # meaning that we're processing a tuple
                    StringToReturn = StringToReturn + ")"
                else:
                    StringToReturn = StringToReturn + "]"

            ################################################

        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################

    elif len(ListOfStringsToJoin) == 1:
        StringToReturn = ListOfStringsToJoin[0]

    else:
        StringToReturn = ListOfStringsToJoin

    return StringToReturn
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################
def ConvertDictToProperlyFormattedStringForPrinting(DictToPrint, NumberOfDecimalsPlaceToUse = 3, NumberOfEntriesPerLine = 1, NumberOfTabsBetweenItems = 3):

    try:
        ProperlyFormattedStringForPrinting = ""
        ItemsPerLineCounter = 0

        for Key in DictToPrint:

            if isinstance(DictToPrint[Key], dict): #RECURSION
                ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + \
                                                     str(Key) + ":\n" + \
                                                     ConvertDictToProperlyFormattedStringForPrinting(DictToPrint[Key], NumberOfDecimalsPlaceToUse, NumberOfEntriesPerLine, NumberOfTabsBetweenItems)

            else:
                ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + \
                                                     str(Key) + ": " + \
                                                     ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(DictToPrint[Key], 0, NumberOfDecimalsPlaceToUse)

            if ItemsPerLineCounter < NumberOfEntriesPerLine - 1:
                ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + "\t"*NumberOfTabsBetweenItems
                ItemsPerLineCounter = ItemsPerLineCounter + 1
            else:
                ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + "\n"
                ItemsPerLineCounter = 0

        return ProperlyFormattedStringForPrinting

    except:
        exceptions = sys.exc_info()[0]
        print("ConvertDictToProperlyFormattedStringForPrinting, Exceptions: %s" % exceptions)
        return ""
        # traceback.print_exc()
#######################################################################################################################
#######################################################################################################################

##########################################################################################################
##########################################################################################################
def ExitProgram_Callback(OptionalArugment = 0):
    global EXIT_PROGRAM_FLAG

    print("ExitProgram_Callback event fired!")

    EXIT_PROGRAM_FLAG = 1
##########################################################################################################
##########################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
if __name__ == '__main__': #unicorn

    print("test_program_for_GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class.py, Starting.")

    #################################################
    #################################################
    global EXIT_PROGRAM_FLAG
    EXIT_PROGRAM_FLAG = 0

    global USE_GetCPUandMemoryUsageOfProcessByPID_FLAG
    USE_GetCPUandMemoryUsageOfProcessByPID_FLAG = 1

    global CurrentTime_MainLoopThread
    CurrentTime_MainLoopThread = -11111.0

    global StartingTime_MainLoopThread
    StartingTime_MainLoopThread = -11111.0
    #################################################
    #################################################
    
    #################################################
    #################################################
    global GetCPUandMemoryUsageOfProcessByPID_Object

    global GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG
    GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG = 0

    global GetCPUandMemoryUsageOfProcessByPID_MostRecentDict
    GetCPUandMemoryUsageOfProcessByPID_MostRecentDict = dict()

    global GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_Time
    GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_Time = -11111.1

    global GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_MemoryUsageOfProcessByPID_Dict
    GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_MemoryUsageOfProcessByPID_Dict = dict()

    #################################################
    #################################################
    
    #################################################
    #################################################
    keyboard.on_press_key("esc", ExitProgram_Callback)
    #################################################
    #################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    #################################################
    #################################################

    #################################################
    global GetCPUandMemoryUsageOfProcessByPID_SetupDict
    GetCPUandMemoryUsageOfProcessByPID_SetupDict = dict([("Process_PID_Integer",  os.getpid())]) #os.getpid()
    #################################################

    #################################################
    if USE_GetCPUandMemoryUsageOfProcessByPID_FLAG == 1 and EXIT_PROGRAM_FLAG == 0:
        try:
            GetCPUandMemoryUsageOfProcessByPID_Object = GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class(GetCPUandMemoryUsageOfProcessByPID_SetupDict)
            GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG = GetCPUandMemoryUsageOfProcessByPID_Object.OBJECT_CREATED_SUCCESSFULLY_FLAG

        except:
            exceptions = sys.exc_info()[0]
            print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3ClassObject __init__, exceptions: %s" % exceptions)
            traceback.print_exc()
    #################################################

    #################################################
    #################################################

    #################################################
    #################################################
    if USE_GetCPUandMemoryUsageOfProcessByPID_FLAG == 1:
        if EXIT_PROGRAM_FLAG == 0:
            if GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG != 1:
                print("Failed to open GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class.")
                ExitProgram_Callback()
    #################################################
    #################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    while EXIT_PROGRAM_FLAG == 0:

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        CurrentTime_MainLoopThread = time.time() - StartingTime_MainLoopThread
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################

        ####################################################################################################################### GET's
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        if GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG == 1:
            GetCPUandMemoryUsageOfProcessByPID_MostRecentDict = GetCPUandMemoryUsageOfProcessByPID_Object.GetMostRecentDataDict()
            print("GetCPUandMemoryUsageOfProcessByPID_MostRecentDict: " + str(GetCPUandMemoryUsageOfProcessByPID_MostRecentDict))
            
            if "Time" in GetCPUandMemoryUsageOfProcessByPID_MostRecentDict:
                GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_Time = GetCPUandMemoryUsageOfProcessByPID_MostRecentDict["Time"]
                GetCPUandMemoryUsageOfProcessByPID_MostRecentDict_MemoryUsageOfProcessByPID_Dict = GetCPUandMemoryUsageOfProcessByPID_MostRecentDict["MemoryUsageOfProcessByPID_Dict"]
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        time.sleep(1.1)
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    #######################################################################################################################  THIS IS THE EXIT ROUTINE!
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    if GetCPUandMemoryUsageOfProcessByPID_OPEN_FLAG == 1:
        GetCPUandMemoryUsageOfProcessByPID_Object.ExitProgram_Callback()
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    print("test_program_for_GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class.py, Exiting.")

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
